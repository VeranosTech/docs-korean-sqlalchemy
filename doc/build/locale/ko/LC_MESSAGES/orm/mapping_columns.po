# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-21 14:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/mapping_columns.rst:4
msgid "Mapping Table Columns"
msgstr "테이블 컬럼 매핑"

#: ../../orm/mapping_columns.rst:6
msgid ""
"The default behavior of :func:`~.orm.mapper` is to assemble all the "
"columns in the mapped :class:`.Table` into mapped object attributes, each"
" of which are named according to the name of the column itself "
"(specifically, the ``key`` attribute of :class:`.Column`).  This behavior"
" can be modified in several ways."
msgstr ""
":func:`~.orm.mapper`\ 의 기본 동작은 매핑된 객체 속성을 매핑된 :class:`.Table`\ 의 모든"
"컬럼에 결합시키는 것이다. 각 객체는 컬럼 자체의 이름에 따라 명명된다(구체적으론, "
":class:`.Column`\ 의 ``key`` 속성에 따라서 명명됨). "
"이 동작은 다른 방법들을 통해 변형될 수 있다."


#: ../../orm/mapping_columns.rst:15
msgid "Naming Columns Distinctly from Attribute Names"
msgstr "속성 이름과 다르게 컬럼 이름 만들기(Naming Columns Distinctly from Attribute Names)"

#: ../../orm/mapping_columns.rst:17
msgid ""
"A mapping by default shares the same name for a :class:`.Column` as that "
"of the mapped attribute - specifically it matches the :attr:`.Column.key`"
" attribute on :class:`.Column`, which by default is the same as the "
":attr:`.Column.name`."
msgstr ""
"기본적인 매핑에서 :class:`.Column`\ 은 매핑된 속성과 동일한 이름을 공유한다. "
"구체적으론 :attr:`.Column.key`\ 는 :class:`.Column`\ 의 기본값인 "
":attr:`.Column.name`\ 과 일치한다."

#: ../../orm/mapping_columns.rst:22
msgid ""
"The name assigned to the Python attribute which maps to :class:`.Column` "
"can be different from either :attr:`.Column.name` or :attr:`.Column.key` "
"just by assigning it that way, as we illustrate here in a Declarative "
"mapping::"
msgstr ""
":class:`.Column`\ 과 매핑되는 파이썬 속성에 할당되는 이름은 :attr:`.Column.name`\ 이나 "
":attr:`.Column.key`\ 와 다를 수 있다. 아래 예제에 이런 방식으로 작성한 선언적 매핑"
"이 있다::"

#: ../../orm/mapping_columns.rst:31
msgid ""
"Where above ``User.id`` resolves to a column named ``user_id`` and "
"``User.name`` resolves to a column named ``user_name``."
msgstr ""
"위의 예제 ``User.id``\ 는 컬럼 이름 ``user_id``\ 와 매칭되고, "
"``User.name``\ 은 컬럼 이름 ``user_name``\ 과 매칭된다."

#: ../../orm/mapping_columns.rst:34
msgid ""
"When mapping to an existing table, the :class:`.Column` object can be "
"referenced directly::"
msgstr ""
"이미 존재하는 테이블과 매칭시킬때, :class:`.Column`\ 객체를 직접 참조할 수 있다::"

#: ../../orm/mapping_columns.rst:42
msgid ""
"Or in a classical mapping, placed in the ``properties`` dictionary with "
"the desired key::"
msgstr ""
"또한 고전적 매핑(classical mapping)에서 ``properties`` 사전을 원하는 키가 있는"
"곳에 배치 할 수 있다::"

#: ../../orm/mapping_columns.rst:50
msgid "In the next section we'll examine the usage of ``.key`` more closely."
msgstr "다음 섹션에서 우리는 ``.key``\ 에 대해 좀 더 자세히 알아보겠다."

#: ../../orm/mapping_columns.rst:55
msgid "Automating Column Naming Schemes from Reflected Tables"
msgstr "반영된 테이블에서 컬럼 이름 체계 자동화(Automating Column Naming Schemes from Reflected Tables)"

#: ../../orm/mapping_columns.rst:57
msgid ""
"In the previous section :ref:`mapper_column_distinct_names`, we showed "
"how a :class:`.Column` explicitly mapped to a class can have a different "
"attribute name than the column.  But what if we aren't listing out "
":class:`.Column` objects explicitly, and instead are automating the "
"production of :class:`.Table` objects using reflection (e.g. as described"
" in :ref:`metadata_reflection_toplevel`)? In this case we can make use of"
" the :meth:`.DDLEvents.column_reflect` event to intercept the production "
"of :class:`.Column` objects and provide them with the :attr:`.Column.key`"
" of our choice::"
msgstr ""
"이전 섹션 :ref:`mapper_column_distinct_names`\ 에서, 우리는 컬럼이름과 속성 이름이 "
"다른 경우 어떻게 :class:`.Column`\ 을 명시적으로 매핑시키는지 알아보았다. 그러나 "
"우리가 :class:`.Column`\ 객체를 명시적으로 나타내지 않고 대신에 반영(reflection) 을"
"사용하여 자동적으로 :class:`.Table`\ 을 생성시킬 수 있을까 ? (예: :ref:`metadata_reflection_toplevel`\ )"
"이번 케이스에서 우리는 :meth:`.DDLEvents.column_reflect`\ 을 사용하여 :class:`.Column`\ 의"
" 생성을 가로채고 사용자가 선택한 :attr:`.Column.key`\ 를 제공하는지 알아보겠다."


#: ../../orm/mapping_columns.rst:71
msgid ""
"With the above event, the reflection of :class:`.Column` objects will be "
"intercepted with our event that adds a new \".key\" element, such as in a"
" mapping as below::"
msgstr ""
"위의 이벤트를 사용하면, :class:`.Column`\ 객체들의 반영(reflection)을 가로채서, "
"새로운 \".key\" 요소를 생성하는 사용자의 이벤트로 바꿀 수 있다 :: "

#: ../../orm/mapping_columns.rst:78
msgid ""
"If we want to qualify our event to only react for the specific "
":class:`.MetaData` object above, we can check for it in our event::"
msgstr ""
"만약 어떤 특정한 :class:`.MetaData`\ 에서만 사용자의 이벤트로 바꾸고 싶다면, "
"우리는 :class:`.MetaData`\ 를 확인한 후 사용자 이벤트로 바꾸는 방법도 있다::"

#: ../../orm/mapping_columns.rst:90
msgid "Naming All Columns with a Prefix"
msgstr "모든 컬럼이 접두사를 갖게 명명하기(Naming All Columns with a Prefix)"

#: ../../orm/mapping_columns.rst:92
msgid ""
"A quick approach to prefix column names, typically when mapping to an "
"existing :class:`.Table` object, is to use ``column_prefix``::"
msgstr ""
"빠르게 컬럼 이름 접두사를 사용하려면, 일반적으로 존재하는 :class:`.Table`\ 객체에 "
"``column_prefix``\ 를 사용하여 매핑한다::"

#: ../../orm/mapping_columns.rst:99
msgid ""
"The above will place attribute names such as ``_user_id``, "
"``_user_name``, ``_password`` etc. on the mapped ``User`` class."
msgstr ""
"위의 접두사 설정하기 예제를 통해 속성 이름에 ``_user_id``, ``_user_name``, ``_password``\ 을 "
"매핑시켰다."

#: ../../orm/mapping_columns.rst:102
msgid ""
"This approach is uncommon in modern usage.   For dealing with reflected "
"tables, a more flexible approach is to use that described in "
":ref:`mapper_automated_reflection_schemes`."
msgstr ""
"이런 방식은 잘 사용되지 않다. 테이블에 반영을 다루기 위해선, "
":ref:`mapper_automated_reflection_schemes`\ 에 나와있는 것 처럼 좀 더 탄력있는"
"방식이 잘 사용된다."

#: ../../orm/mapping_columns.rst:108
msgid "Using column_property for column level options"
msgstr "컬럼 레벨 옵션에 컬럼 프로퍼티 사용하기(Using column_property for column level options)"

#: ../../orm/mapping_columns.rst:110
msgid ""
"Options can be specified when mapping a :class:`.Column` using the "
":func:`.column_property` function.  This function explicitly creates the "
":class:`.ColumnProperty` used by the :func:`.mapper` to keep track of the"
" :class:`.Column`; normally, the :func:`.mapper` creates this "
"automatically.   Using :func:`.column_property`, we can pass additional "
"arguments about how we'd like the :class:`.Column` to be mapped.   Below,"
" we pass an option ``active_history``, which specifies that a change to "
"this column's value should result in the former value being loaded "
"first::"
msgstr ""
":func:`.column_property`\ 함수를 :class:`.Column` 클래스 매핑할때 옵션을 사용할 "
"수 있다. 이 함수는 :class:`.ColumnProperty`\ 를 생성하며, 이것은 "
":class:`.Column`\ 을 계속 추적하는 :func:`.mapper`\ 함수에 의해 사용되어진다."
" 일반적으로 :func:`.mapper`\ 함수는 :class:`.ColumnProperty`\ 를 자용적으로 생성한다."
" :func:`.column_property`\ 을 사용하기 위해선 :class:`.Column`\ 에 매핑했던 것처럼 "
"추가적인 인자(arguments)를 넘겨줘야 한다."
" 아래 예제에서 우리는 ``active_history``\n 옵션을 넘겨주었으며, 이 옵션은 컬럼에 값이 "
" 넣어지면 이전 값을 먼저 불러오도록 한다."

#: ../../orm/mapping_columns.rst:128
msgid ""
":func:`.column_property` is also used to map a single attribute to "
"multiple columns.  This use case arises when mapping to a "
":func:`~.expression.join` which has attributes which are equated to each "
"other::"
msgstr ""
":func:`.column_property` 는 또한 단일 속성을 많은 컬럼들에 매핑할때 사용된다. "
"서로 같은 속성을 가진 :func:`~.expression.join`\ 을 매핑시킬때 사용할 수 있다::"

#: ../../orm/mapping_columns.rst:139
msgid "For more examples featuring this usage, see :ref:`maptojoin`."
msgstr "이 사용방법에 대해 더 많은 예제들을 보시려면 :ref:`maptojoin`\ 을 참조하라."

#: ../../orm/mapping_columns.rst:141
msgid ""
"Another place where :func:`.column_property` is needed is to specify SQL "
"expressions as mapped attributes, such as below where we create an "
"attribute ``fullname`` that is the string concatenation of the "
"``firstname`` and ``lastname`` columns::"
msgstr ""
":func:`.column_property`\ 가 필요한 또 다른 경우는 SQL 표현식을 매핑된 속성으로 지정할 때 이다."
"아래 예제에서 우리는 ``firstname``\ 컬럼과 ``lastname`` 컬럼의 문자열 결합한 ``fullname`` 속성을 "
"만들었다::"

#: ../../orm/mapping_columns.rst:153
msgid "See examples of this usage at :ref:`mapper_sql_expressions`."
msgstr "더 많은 예제를 보시려면 :ref:`mapper_sql_expressions`\ 를 참조하라."

#: of sqlalchemy.orm.column_property:1
msgid "Provide a column-level property for use with a Mapper."
msgstr ""

#: of sqlalchemy.orm.column_property:3
msgid ""
"Column-based properties can normally be applied to the mapper's "
"``properties`` dictionary using the :class:`.Column` element directly. "
"Use this function when the given column is not directly present within "
"the mapper's selectable; examples include SQL expressions, functions, and"
" scalar SELECT queries."
msgstr ""
"컬럼-기반 프로퍼티(properties)는 :class:`.Column` 요소를 직접적으로 사용하여 "
"매퍼의 ``properties``\ 사전에 적용되어질 수 있다. 주어진 컬럼이 매퍼(mapper)의 선택항목(selectable)"
"에 직접 존재하지 않을때 이 함수를 사용한다. 예를 들어 SQL 표현식들, 함수들, "
"scalar SELECT 쿼리들이 여기에 해당된다."

#: of sqlalchemy.orm.column_property:9
msgid ""
"Columns that aren't present in the mapper's selectable won't be persisted"
" by the mapper and are effectively \"read-only\" attributes."
msgstr ""
"매퍼(mapper)의 선택항목(selectable)에 없는 컬럼일 경우 그 컬럼은 매퍼에 의해 유지(persisted)"
" 되지 않을 것이고, \"읽기 전용\" 속성 이다."

#: of sqlalchemy.orm.column_property
msgid "Parameters"
msgstr "매개변수"

#: of sqlalchemy.orm.column_property:12
msgid "list of Column objects to be mapped."
msgstr ""

#: of sqlalchemy.orm.column_property:15
msgid ""
"When ``True``, indicates that the \"previous\" value for a scalar "
"attribute should be loaded when replaced, if not already loaded. "
"Normally, history tracking logic for simple non-primary-key scalar values"
" only needs to be aware of the \"new\" value in order to perform a flush."
" This flag is available for applications that make use of "
":func:`.attributes.get_history` or :meth:`.Session.is_modified` which "
"also need to know the \"previous\" value of the attribute.  .. "
"versionadded:: 0.6.6"
msgstr ""

#: of sqlalchemy.orm.column_property:16
msgid ""
"When ``True``, indicates that the \"previous\" value for a scalar "
"attribute should be loaded when replaced, if not already loaded. "
"Normally, history tracking logic for simple non-primary-key scalar values"
" only needs to be aware of the \"new\" value in order to perform a flush."
" This flag is available for applications that make use of "
":func:`.attributes.get_history` or :meth:`.Session.is_modified` which "
"also need to know the \"previous\" value of the attribute."
msgstr ""

#: of sqlalchemy.orm.column_property:28
msgid ""
"a class which extends :class:`.ColumnProperty.Comparator` which provides "
"custom SQL clause generation for comparison operations."
msgstr ""

#: of sqlalchemy.orm.column_property:32
msgid "a group name for this property when marked as deferred."
msgstr ""

#: of sqlalchemy.orm.column_property:35
msgid ""
"when True, the column property is \"deferred\", meaning that it does not "
"load immediately, and is instead loaded when the attribute is first "
"accessed on an instance.  See also :func:`~sqlalchemy.orm.deferred`."
msgstr ""

#: of sqlalchemy.orm.column_property:41
msgid ""
"optional string that will be applied as the doc on the class-bound "
"descriptor."
msgstr ""

#: of sqlalchemy.orm.column_property:45
msgid ""
"Disable expiry on flush.   A column_property() which refers to a SQL "
"expression (and not a single table-bound column) is considered to be a "
"\"read only\" property; populating it has no effect on the state of data,"
" and it can only return database state.   For this reason a "
"column_property()'s value is expired whenever the parent object is "
"involved in a flush, that is, has any kind of \"dirty\" state within a "
"flush. Setting this parameter to ``False`` will have the effect of "
"leaving any existing value present after the flush proceeds. Note however"
" that the :class:`.Session` with default expiration settings still "
"expires all attributes after a :meth:`.Session.commit` call, however.  .."
" versionadded:: 0.7.3"
msgstr ""

#: of sqlalchemy.orm.column_property:46
msgid ""
"Disable expiry on flush.   A column_property() which refers to a SQL "
"expression (and not a single table-bound column) is considered to be a "
"\"read only\" property; populating it has no effect on the state of data,"
" and it can only return database state.   For this reason a "
"column_property()'s value is expired whenever the parent object is "
"involved in a flush, that is, has any kind of \"dirty\" state within a "
"flush. Setting this parameter to ``False`` will have the effect of "
"leaving any existing value present after the flush proceeds. Note however"
" that the :class:`.Session` with default expiration settings still "
"expires all attributes after a :meth:`.Session.commit` call, however."
msgstr ""

#: of sqlalchemy.orm.column_property:61
msgid ""
"Optional data dictionary which will be populated into the "
":attr:`.MapperProperty.info` attribute of this object.  .. versionadded::"
" 0.8"
msgstr ""

#: of sqlalchemy.orm.column_property:61
msgid ""
"Optional data dictionary which will be populated into the "
":attr:`.MapperProperty.info` attribute of this object."
msgstr ""

#: of sqlalchemy.orm.column_property:66
msgid ""
"an :class:`.AttributeExtension` instance, or list of extensions, which "
"will be prepended to the list of attribute listeners for the resulting "
"descriptor placed on the class. **Deprecated.** Please see "
":class:`.AttributeEvents`."
msgstr ""

#: ../../orm/mapping_columns.rst:160
msgid "Mapping a Subset of Table Columns"
msgstr "테이블 컬럼들의 서브셋 매핑(Mapping a Subset of Table Columns)"

#: ../../orm/mapping_columns.rst:162
msgid ""
"Sometimes, a :class:`.Table` object was made available using the "
"reflection process described at :ref:`metadata_reflection` to load the "
"table's structure from the database. For such a table that has lots of "
"columns that don't need to be referenced in the application, the "
"``include_properties`` or ``exclude_properties`` arguments can specify "
"that only a subset of columns should be mapped. For example::"
msgstr ""
"때때로 :ref:`metadata_reflection`\ 에 설명된 반영 프로세스(reflection process)"
"를 사용하여 데이터베이스에서 테이블 구조를 불러올때 :class:`.Table`\ 객체가 사용 가능할"
"수 있게 될 때가 있다. 이처럼 많은 컬럼을 가지고 있지만 실제 어플리케이션에서 참조될 필요가"
"없는 테이블이 있을 때 우리는 ``include_properties``\ 혹은 ``exclude_properties``\ 인자"
"를 사용하여 언제 컬럼들의 서브셋이 매핑되어져야 할지 지정할 수 있다. 예::"

#: ../../orm/mapping_columns.rst:176
msgid ""
"...will map the ``User`` class to the ``user_table`` table, only "
"including the ``user_id`` and ``user_name`` columns - the rest are not "
"referenced. Similarly::"
msgstr ""
"... ``user_id``\ 컬럼과 ``user_name``\ 컬럼을 포함하여 "
"``User``\ 클래스는 ``user_table``\ 테이블에 매핑되어지고, 나머지들은 참조되지 "
"않는다. 비슷한 예로::"

#: ../../orm/mapping_columns.rst:186
msgid ""
"...will map the ``Address`` class to the ``address_table`` table, "
"including all columns present except ``street``, ``city``, ``state``, and"
" ``zip``."
msgstr ""
"... ``street``, ``city``, ``state``, ``zip``\ 을 제외한 모든 컬럼들을 포함하여 "
"``Address``\ 클래스는 ``address_table``\ 에 매핑 되어 진다."

#: ../../orm/mapping_columns.rst:189
msgid ""
"When this mapping is used, the columns that are not included will not be "
"referenced in any SELECT statements emitted by :class:`.Query`, nor will "
"there be any mapped attribute on the mapped class which represents the "
"column; assigning an attribute of that name will have no effect beyond "
"that of a normal Python attribute assignment."
msgstr ""
"이러한 매핑들이 사용하면 참조되어 지지않은 열들은 SELECT 명령에서 어떠한 :class:`.Query`\ 도 "
"배출하지 않으며, 열을 나타내는 매핑된 클래스에 어떠만 매핑된 속성이 없다."
"그 이름의 속성을 할당하면 그것은 일반적인 파이선 속성 할당과 같다."

#: ../../orm/mapping_columns.rst:195
msgid ""
"In some cases, multiple columns may have the same name, such as when "
"mapping to a join of two or more tables that share some column name. "
"``include_properties`` and ``exclude_properties`` can also accommodate "
":class:`.Column` objects to more accurately describe which columns should"
" be included or excluded::"
msgstr ""
"때때로, 이름을 공유하는 두개 이상의 테이블의 조인을 매핑할 경우처럼"
" 여러 컬럼들이 모두 같은 이름을 갖을 수 있다. ``include_properties``\ 와 "
"``exclude_properties``\ 는 어떤 컬럼들이 포함되고 제외되어야 할지 더 정확하게 기술 하기 위해 "
":class:`.Column`\ 객체를 수용한다."

#: ../../orm/mapping_columns.rst:210
msgid ""
"insert and update defaults configured on individual :class:`.Column` "
"objects, i.e. those described at :ref:`metadata_defaults` including those"
" configured by the ``default``, ``update``, ``server_default`` and "
"``server_onupdate`` arguments, will continue to function normally even if"
" those :class:`.Column` objects are not mapped. This is because in the "
"case of ``default`` and ``update``, the :class:`.Column` object is still "
"present on the underlying :class:`.Table`, thus allowing the default "
"functions to take place when the ORM emits an INSERT or UPDATE, and in "
"the case of ``server_default`` and ``server_onupdate``, the relational "
"database itself maintains these functions."
msgstr ""
""
