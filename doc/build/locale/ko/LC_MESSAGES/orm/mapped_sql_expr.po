# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-21 14:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/mapped_sql_expr.rst:6
msgid "SQL Expressions as Mapped Attributes"
msgstr "매핑된 속성으로서 SQL 표현식"

#: ../../orm/mapped_sql_expr.rst:8
msgid ""
"Attributes on a mapped class can be linked to SQL expressions, which can "
"be used in queries."
msgstr ""
"매핑된 클래스의 속성들은 쿼리(query)에서 사용되는 SQL 표현식과 연결될 수 있다."

#: ../../orm/mapped_sql_expr.rst:12
msgid "Using a Hybrid"
msgstr "하이브리드 사용하기"

#: ../../orm/mapped_sql_expr.rst:14
msgid ""
"The easiest and most flexible way to link relatively simple SQL "
"expressions to a class is to use a so-called \"hybrid attribute\", "
"described in the section :ref:`hybrids_toplevel`.  The hybrid provides "
"for an expression that works at both the Python level as well as at the "
"SQL expression level.  For example, below we map a class ``User``, "
"containing attributes ``firstname`` and ``lastname``, and include a "
"hybrid that will provide for us the ``fullname``, which is the string "
"concatenation of the two::"
msgstr ""
"상대적으로 간단한 SQL 표현식을 클래스에 연결하는 가장 쉬운 방법은 "
" :ref:`hybrids_toplevel`\ 절에 설명된 \"하이브리드 속성(hybrid attribute)\"\ 을 사용하는 방법이 있다. "
"하이브리드는 SQL 표현식 수준과 파이선 수준 둘 모두 작동하는 표현식을 제공한다"
"예를 들어, 아래 ``User``\ 클래스는 ``firstname``\ 과 ``lastname``\ 속성을 매핑하였고, "
"이 두 속성을 합친(concatenation) ``fullname``\ 하이브리드 속성을 제공하고 있다."

#: ../../orm/mapped_sql_expr.rst:34
msgid ""
"Above, the ``fullname`` attribute is interpreted at both the instance and"
" class level, so that it is available from an instance::"
msgstr ""
"위의 ``fullname`` 속성은 인스턴스와 클래스 수준에서 사용(interpreted)되어지므로, "
"인스턴스에서 사용할 수 있다::"

#: ../../orm/mapped_sql_expr.rst:40
msgid "as well as usable within queries::"
msgstr "쿼리에서도 사용할 수 있습니다::"

#: ../../orm/mapped_sql_expr.rst:44
msgid ""
"The string concatenation example is a simple one, where the Python "
"expression can be dual purposed at the instance and class level.  Often, "
"the SQL expression must be distinguished from the Python expression, "
"which can be achieved using :meth:`.hybrid_property.expression`.  Below "
"we illustrate the case where a conditional needs to be present inside the"
" hybrid, using the ``if`` statement in Python and the "
":func:`.sql.expression.case` construct for SQL expressions::"
msgstr ""
"이 간단한 문자열 결합 예제는 인스턴스와 클래스 수준에서 파이썬 표현식이 이중 목적으로"
"사용되어 질 수 있다는 것을 보인다. 때때로, SQL 표현식은 반드시 파이썬 표현식과 구분되어져야 하는데"
" :meth:`.hybrid_property.expression`\ 을 사용함으로써 구분할 수 있다."
" 아래 설명은 조건부 하이브리드가 존재해야 하는 경우를 보여주고 있다. ``if``\ 문과 :func:`.sql.expression.case`\ "
"을 사용해 SQL 표현식을 만들고 있다."

#: ../../orm/mapped_sql_expr.rst:76
msgid "Using column_property"
msgstr "컬럼 속성(property) 사용하기"

#: ../../orm/mapped_sql_expr.rst:78
msgid ""
"The :func:`.orm.column_property` function can be used to map a SQL "
"expression in a manner similar to a regularly mapped :class:`.Column`. "
"With this technique, the attribute is loaded along with all other column-"
"mapped attributes at load time.  This is in some cases an advantage over "
"the usage of hybrids, as the value can be loaded up front at the same "
"time as the parent row of the object, particularly if the expression is "
"one which links to other tables (typically as a correlated subquery) to "
"access data that wouldn't normally be available on an already loaded "
"object."
msgstr ""
":func:`.orm.column_property` 함수는 SQL 표현식을 일반적인 :class:`.Column`\ 매핑 방식과"
"비슷하게 사용되어질 수 있다. 이 방식을 사용하면 로드할 때 속성이 다른 모든 컬럼-매핑된(column-mapped) "
"속성들과 함께 로드된다. 이것은 하이브리드 방식을 사용할 때 보다 더 많은 이점이 있다. 개체의 부모 행과 동시에"
"로드될 수 있고, 특히 표현식이 다른 테이블들에 연결되어 있을 경우(일반적으로 상관(correlated) 서브쿼리) 이미 로드된"
"객체에서는 참조할 수 없는 데이터에 접근 할수 있다."

#: ../../orm/mapped_sql_expr.rst:88
msgid ""
"Disadvantages to using :func:`.orm.column_property` for SQL expressions "
"include that the expression must be compatible with the SELECT statement "
"emitted for the class as a whole, and there are also some configurational"
" quirks which can occur when using :func:`.orm.column_property` from "
"declarative mixins."
msgstr ""
":func:`.orm.column_property`\ 함수를 SQL 표현식에 사용했을때 얻는 단점은 표현식이 클래스에서 생성된"
"전체적인 SELECT문과 호환 가능해야하며, :func:`.orm.column_property`\ 의 선언적 믹스인(declarative mixins) 을"
"사용할때 몇 가지 구성적 단점이 있을 수 있다."

#: ../../orm/mapped_sql_expr.rst:93
msgid ""
"Our \"fullname\" example can be expressed using "
":func:`.orm.column_property` as follows::"
msgstr ""
"\"fullname\" 예제는 :func:`.orm.column_property`\ 을 사용해 다음과 같이 표현될 수 있다."

#: ../../orm/mapped_sql_expr.rst:105
msgid ""
"Correlated subqueries may be used as well.  Below we use the "
":func:`.select` construct to create a SELECT that links together the "
"count of ``Address`` objects available for a particular ``User``::"
msgstr ""
"상관된(Correlated) 서브쿼리를 사용할 수도 있다. 아래 예에서 우리는 :func:`.select`\ 함수를 사용하여 "
"특정 ``User``\ 와 ``Address`` 객체 수를 함께 연결시킨 SELECT문을 생성시켰다."

#: ../../orm/mapped_sql_expr.rst:131
msgid ""
"In the above example, we define a :func:`.select` construct like the "
"following::"
msgstr ""
"위의 예제에서, 우리는 :func:`.select` 함수가 아래와 같이 생성하도록 정의하였다::"

#: ../../orm/mapped_sql_expr.rst:137
msgid ""
"The meaning of the above statement is, select the count of ``Address.id``"
" rows where the ``Address.user_id`` column is equated to ``id``, which in"
" the context of the ``User`` class is the :class:`.Column` named ``id`` "
"(note that ``id`` is also the name of a Python built in function, which "
"is not what we want to use here - if we were outside of the ``User`` "
"class definition, we'd use ``User.id``)."
msgstr ""
"위 코드는 ``Address.id``\ 행의 갯수를 SELECT 하는 의미를 갖고 있다. "
"``Address.user_id``\ 컬럼은 ``User``\ 클래스의 ``id``\ :class:`.Column`\ 과 같다. "
"(여기서 ``id`` 는 python 빌트-인 함수와 이름이 같지만 이것은 우리가 의도하는 바가 아니다.)"

#: ../../orm/mapped_sql_expr.rst:143
msgid ""
"The :meth:`.select.correlate_except` directive indicates that each "
"element in the FROM clause of this :func:`.select` may be omitted from "
"the FROM list (that is, correlated to the enclosing SELECT statement "
"against ``User``) except for the one corresponding to ``Address``.  This "
"isn't strictly necessary, but prevents ``Address`` from being "
"inadvertently omitted from the FROM list in the case of a long string of "
"joins between ``User`` and ``Address`` tables where SELECT statements "
"against ``Address`` are nested."
msgstr ""

#: ../../orm/mapped_sql_expr.rst:151
msgid ""
"If import issues prevent the :func:`.column_property` from being defined "
"inline with the class, it can be assigned to the class after both are "
"configured.   In Declarative this has the effect of calling "
":meth:`.Mapper.add_property` to add an additional property after the "
"fact::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:161
msgid ""
"For many-to-many relationships, use :func:`.and_` to join the fields of "
"the association table to both tables in a relation, illustrated here with"
" a classical mapping::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:177
msgid "Using a plain descriptor"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:179
msgid ""
"In cases where a SQL query more elaborate than what "
":func:`.orm.column_property` or :class:`.hybrid_property` can provide "
"must be emitted, a regular Python function accessed as an attribute can "
"be used, assuming the expression only needs to be available on an "
"already-loaded instance.   The function is decorated with Python's own "
"``@property`` decorator to mark it as a read-only attribute.   Within the"
" function, :func:`.object_session` is used to locate the "
":class:`.Session` corresponding to the current object, which is then used"
" to emit a query::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:205
msgid ""
"The plain descriptor approach is useful as a last resort, but is less "
"performant in the usual case than both the hybrid and column property "
"approaches, in that it needs to emit a SQL query upon each access."
msgstr ""

#: ../../orm/mapped_sql_expr.rst:212
msgid "Query-time SQL expressions as mapped attributes"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:214
msgid ""
"When using :meth:`.Session.query`, we have the option to specify not just"
" mapped entities but ad-hoc SQL expressions as well.  Suppose if a class "
"``A`` had integer attributes ``.x`` and ``.y``, we could query for ``A`` "
"objects, and additionally the sum of ``.x`` and ``.y``, as follows::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:221
msgid "The above query returns tuples of the form ``(A object, integer)``."
msgstr ""

#: ../../orm/mapped_sql_expr.rst:223
msgid ""
"An option exists which can apply the ad-hoc ``A.x + A.y`` expression to "
"the returned ``A`` objects instead of as a separate tuple entry; this is "
"the :func:`.with_expression` query option in conjunction with the "
":func:`.query_expression` attribute mapping.    The class is mapped to "
"include a placeholder attribute where any particular SQL expression may "
"be applied::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:240
msgid ""
"We can then query for objects of type ``A``, applying an arbitrary SQL "
"expression to be populated into ``A.expr``::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:247
msgid "The :func:`.query_expression` mapping has these caveats:"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:249
msgid ""
"On an object where :func:`.query_expression` were not used to populate "
"the attribute, the attribute on an object instance will have the value "
"``None``."
msgstr ""

#: ../../orm/mapped_sql_expr.rst:253
msgid ""
"The query_expression value **does not refresh when the object is "
"expired**.  Once the object is expired, either via "
":meth:`.Session.expire` or via the expire_on_commit behavior of "
":meth:`.Session.commit`, the value is removed from the attribute and will"
" return ``None`` on subsequent access. Only by running a new "
":class:`.Query` that touches the object which includes a new "
":func:`.with_expression` directive will the attribute be set to a non-"
"None value."
msgstr ""

#: ../../orm/mapped_sql_expr.rst:261
msgid ""
"The mapped attribute currently **cannot** be applied to other parts of "
"the query, such as the WHERE clause, the ORDER BY clause, and make use of"
" the ad-hoc expression; that is, this won't work::"
msgstr ""

#: ../../orm/mapped_sql_expr.rst:270
msgid ""
"The ``A.expr`` expression will resolve to NULL in the above WHERE clause "
"and ORDER BY clause. To use the expression throughout the query, assign "
"to a variable and use that::"
msgstr ""

