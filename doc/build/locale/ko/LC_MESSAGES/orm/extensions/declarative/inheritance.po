# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-21 14:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/extensions/declarative/inheritance.rst:4
msgid "Inheritance Configuration"
msgstr "상속 설정"

#: ../../orm/extensions/declarative/inheritance.rst:6
msgid ""
"Declarative supports all three forms of inheritance as intuitively as "
"possible.  The ``inherits`` mapper keyword argument is not needed as "
"declarative will determine this from the class itself.   The various "
"\"polymorphic\" keyword arguments are specified using "
"``__mapper_args__``."
msgstr ""
"선언(Declarative) 확장기능은 세가지 유형의 상속을 모두 직관적으로 지원한다. "
"선언 확장기능이 클래스 내에서 상속에 대한 결정을 내리기 때문에 "
"``inherits`` 매퍼 키워드 인수가 필요하지 않다. "
"다형성에 관련된 키워드 인수는 ``__mapper_args__``\ 를 사용하여 지정한다. "

#: ../../orm/extensions/declarative/inheritance.rst:13
msgid ""
"This section describes some specific details on how the Declarative "
"system interacts with SQLAlchemy ORM inheritance configuration.  See "
":ref:`inheritance_toplevel` for a general introduction to inheritance "
"mapping."
msgstr ""
"이 절에서는 선언 확장기능 시스템이 어떻게 SQLAlchmey ORM의 상속 설정과 상호작용하는지 "
"자세히 설명한다. 상속 매핑 자체의 소개에 대해서는 :ref:`inheritance_toplevel`  절을 "
"참조한다. "

#: ../../orm/extensions/declarative/inheritance.rst:19
msgid "Joined Table Inheritance"
msgstr "조인 테이블 상속"

#: ../../orm/extensions/declarative/inheritance.rst:21
msgid ""
"Joined table inheritance is defined as a subclass that defines its own "
"table::"
msgstr ""
"조인 테이블 상속 방식에서는 해당 테이블을 서브클래스로 정의한다::"

#: ../../orm/extensions/declarative/inheritance.rst:36
msgid ""
"Note that above, the ``Engineer.id`` attribute, since it shares the same "
"attribute name as the ``Person.id`` attribute, will in fact represent the"
" ``people.id`` and ``engineers.id`` columns together, with the "
"\"Engineer.id\" column taking precedence if queried directly. To provide "
"the ``Engineer`` class with an attribute that represents only the "
"``engineers.id`` column, give it a different attribute name::"
msgstr ""
"위 코드에서 ``Engineer.id`` 속성이 ``Person.id`` 속성과 이름이 같기 때문에 "
"실제로는 ``people.id`` 컬럼과 ``engineers.id`` 컬럼을 모두 대표하고 있다. "
"직접 쿼리를 할 때는 \"Engineer.id\" 컬럼이 더 우선순위가 높다. "
"``Engineer`` 클래스에 ``engineers.id`` 컬럼만을 대표하는 속성을 넣고 싶으면 "
"다른 속성 이름을 사용해야 한다.::"

#: ../../orm/extensions/declarative/inheritance.rst:54
msgid "Single Table Inheritance"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:56
msgid ""
"Single table inheritance is defined as a subclass that does not have its "
"own table; you just leave out the ``__table__`` and ``__tablename__`` "
"attributes::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:70
msgid ""
"When the above mappers are configured, the ``Person`` class is mapped to "
"the ``people`` table *before* the ``primary_language`` column is defined,"
" and this column will not be included in its own mapping. When "
"``Engineer`` then defines the ``primary_language`` column, the column is "
"added to the ``people`` table so that it is included in the mapping for "
"``Engineer`` and is also part of the table's full set of columns.  "
"Columns which are not mapped to ``Person`` are also excluded from any "
"other single or joined inheriting classes using the "
"``exclude_properties`` mapper argument.  Below, ``Manager`` will have all"
" the attributes of ``Person`` and ``Manager`` but *not* the "
"``primary_language`` attribute of ``Engineer``::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:86
msgid ""
"The attribute exclusion logic is provided by the ``exclude_properties`` "
"mapper argument, and declarative's default behavior can be disabled by "
"passing an explicit ``exclude_properties`` collection (empty or "
"otherwise) to the ``__mapper_args__``."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:94
msgid "Resolving Column Conflicts"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:96
msgid ""
"Note above that the ``primary_language`` and ``golf_swing`` columns are "
"\"moved up\" to be applied to ``Person.__table__``, as a result of their "
"declaration on a subclass that has no table of its own.   A tricky case "
"comes up when two subclasses want to specify *the same* column, as "
"below::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:115
msgid ""
"Above, the ``start_date`` column declared on both ``Engineer`` and "
"``Manager`` will result in an error::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:122
msgid ""
"In a situation like this, Declarative can't be sure of the intent, "
"especially if the ``start_date`` columns had, for example, different "
"types.   A situation like this can be resolved by using "
":class:`.declared_attr` to define the :class:`.Column` conditionally, "
"taking care to return the **existing column** via the parent "
"``__table__`` if it already exists::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:153
msgid ""
"Above, when ``Manager`` is mapped, the ``start_date`` column is already "
"present on the ``Person`` class.  Declarative lets us return that "
":class:`.Column` as a result in this case, where it knows to skip re-"
"assigning the same column. If the mapping is mis-configured such that the"
" ``start_date`` column is accidentally re-assigned to a different table "
"(such as, if we changed ``Manager`` to be joined inheritance without "
"fixing ``start_date``), an error is raised which indicates an existing "
":class:`.Column` is trying to be re-assigned to a different owning "
":class:`.Table`."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:163
msgid ""
":class:`.declared_attr` can be used on a non-mixin class, and the "
"returned :class:`.Column` or other mapped attribute will be applied to "
"the mapping as any other attribute.  Previously, the resulting attribute "
"would be ignored, and also result in a warning being emitted when a "
"subclass was created."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:169
msgid ""
":class:`.declared_attr`, when used either with a mixin or non-mixin "
"declarative class, can return an existing :class:`.Column` already "
"assigned to the parent :class:`.Table`, to indicate that the re-"
"assignment of the :class:`.Column` should be skipped, however should "
"still be mapped on the target class, in order to resolve duplicate column"
" conflicts."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:176
msgid ""
"The same concept can be used with mixin classes (see "
":ref:`declarative_mixins`)::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:196
msgid ""
"The above mixin checks the local ``__table__`` attribute for the column. "
"Because we're using single table inheritance, we're sure that in this "
"case, ``cls.__table__`` refers to ``Person.__table__``.  If we were "
"mixing joined- and single-table inheritance, we might want our mixin to "
"check more carefully if ``cls.__table__`` is really the :class:`.Table` "
"we're looking for."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:205
msgid "Concrete Table Inheritance"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:207
msgid ""
"Concrete is defined as a subclass which has its own table and sets the "
"``concrete`` keyword argument to ``True``::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:222
msgid ""
"Usage of an abstract base class is a little less straightforward as it "
"requires usage of :func:`~sqlalchemy.orm.util.polymorphic_union`, which "
"needs to be created with the :class:`.Table` objects before the class is "
"built::"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:255
msgid ""
"The helper classes :class:`.AbstractConcreteBase` and "
":class:`.ConcreteBase` provide automation for the above system of "
"creating a polymorphic union. See the documentation for these helpers as "
"well as the main ORM documentation on concrete inheritance for details."
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:262
msgid ":ref:`concrete_inheritance`"
msgstr ""

#: ../../orm/extensions/declarative/inheritance.rst:264
msgid ":ref:`inheritance_concrete_helpers`"
msgstr ""

