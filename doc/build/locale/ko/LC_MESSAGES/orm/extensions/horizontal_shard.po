# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-21 14:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/extensions/horizontal_shard.rst:4
msgid "Horizontal Sharding"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard:1
msgid "Horizontal sharding support."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard:3
msgid ""
"Defines a rudimental 'horizontal sharding' system which allows a Session "
"to distribute queries and persistence operations across multiple "
"databases."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard:6
msgid ""
"For a usage example, see the :ref:`examples_sharding` example included in"
" the source distribution."
msgstr ""

#: ../../orm/extensions/horizontal_shard.rst:9
msgid "API Documentation"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:1
msgid ""
"Return a :class:`.Connection` object corresponding to this "
":class:`.Session` object's transactional state."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:4
msgid ""
"If this :class:`.Session` is configured with ``autocommit=False``, either"
" the :class:`.Connection` corresponding to the current transaction is "
"returned, or if no transaction is in progress, a new one is begun and the"
" :class:`.Connection` returned (note that no transactional state is "
"established with the DBAPI until the first SQL statement is emitted)."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:11
msgid ""
"Alternatively, if this :class:`.Session` is configured with "
"``autocommit=True``, an ad-hoc :class:`.Connection` is returned using "
":meth:`.Engine.contextual_connect` on the underlying :class:`.Engine`."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:16
msgid ""
"Ambiguity in multi-bind or unbound :class:`.Session` objects can be "
"resolved through any of the optional keyword arguments.   This ultimately"
" makes usage of the :meth:`.get_bind` method for resolution."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection
#: sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind
msgid "Parameters"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:20
msgid ""
"Optional :class:`.Engine` to be used as the bind.  If this engine is "
"already involved in an ongoing transaction, that connection will be used."
"  This argument takes precedence over ``mapper``, ``clause``."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:26
msgid ""
"Optional :func:`.mapper` mapped class, used to identify the appropriate "
"bind.  This argument takes precedence over ``clause``."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:31
msgid ""
"A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`, "
":func:`~.sql.expression.text`, etc.) which will be used to locate a bind,"
" if a bind cannot otherwise be identified."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:37
msgid ""
"Passed to :meth:`.Engine.connect`, indicating the :class:`.Connection` "
"should be considered \"single use\", automatically closing when the first"
" result set is closed.  This flag only has an effect if this "
":class:`.Session` is configured with ``autocommit=True`` and does not "
"already have a transaction in progress."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:44
msgid ""
"a dictionary of execution options that will be passed to "
":meth:`.Connection.execution_options`, **when the connection is first "
"procured only**.   If the connection is already present within the "
":class:`.Session`, a warning is emitted and the arguments are ignored.  "
".. versionadded:: 0.9.9  .. seealso::     "
":ref:`session_transaction_isolation`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:44
msgid ""
"a dictionary of execution options that will be passed to "
":meth:`.Connection.execution_options`, **when the connection is first "
"procured only**.   If the connection is already present within the "
":class:`.Session`, a warning is emitted and the arguments are ignored."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:54
msgid ":ref:`session_transaction_isolation`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.connection:56
msgid ""
"Additional keyword arguments are sent to :meth:`get_bind()`, allowing "
"additional arguments to be passed to custom implementations of "
":meth:`get_bind`."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:1
msgid "Return a \"bind\" to which this :class:`.Session` is bound."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:3
msgid ""
"The \"bind\" is usually an instance of :class:`.Engine`, except in the "
"case where the :class:`.Session` has been explicitly bound directly to a "
":class:`.Connection`."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:7
msgid ""
"For a multiply-bound or unbound :class:`.Session`, the ``mapper`` or "
"``clause`` arguments are used to determine the appropriate bind to "
"return."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:11
msgid ""
"Note that the \"mapper\" argument is usually present when "
":meth:`.Session.get_bind` is called via an ORM operation such as a "
":meth:`.Session.query`, each individual INSERT/UPDATE/DELETE operation "
"within a :meth:`.Session.flush`, call, etc."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:17
msgid "The order of resolution is:"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:19
msgid ""
"if mapper given and session.binds is present, locate a bind based first "
"on the mapper in use, then on the mapped class in use, then on any base "
"classes that are present in the ``__mro__`` of the mapped class, from "
"more specific superclasses to more general."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:24
msgid ""
"if clause given and session.binds is present, locate a bind based on "
":class:`.Table` objects found in the given clause present in "
"session.binds."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:27
msgid "if session.bind is present, return that."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:28
msgid ""
"if clause given, attempt to return a bind linked to the "
":class:`.MetaData` ultimately associated with the clause."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:31
msgid ""
"if mapper given, attempt to return a bind linked to the "
":class:`.MetaData` ultimately associated with the :class:`.Table` or "
"other selectable to which the mapper is mapped."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:35
msgid ""
"No bind can be found, :exc:`~sqlalchemy.exc.UnboundExecutionError` is "
"raised."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:38
msgid ""
"Note that the :meth:`.Session.get_bind` method can be overridden on a "
"user-defined subclass of :class:`.Session` to provide any kind of bind "
"resolution scheme.  See the example at "
":ref:`session_custom_partitioning`."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:43
msgid ""
"Optional :func:`.mapper` mapped class or instance of :class:`.Mapper`.   "
"The bind can be derived from a :class:`.Mapper` first by consulting the "
"\"binds\" map associated with this :class:`.Session`, and secondly by "
"consulting the :class:`.MetaData` associated with the :class:`.Table` to "
"which the :class:`.Mapper` is mapped for a bind."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:51
msgid ""
"A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`, "
":func:`~.sql.expression.text`, etc.).  If the ``mapper`` argument is not "
"present or could not produce a bind, the given expression construct will "
"be searched for a bound element, typically a :class:`.Table` associated "
"with bound :class:`.MetaData`."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:61
msgid ":ref:`session_partitioning`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:63
msgid ":paramref:`.Session.binds`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:65
msgid ":meth:`.Session.bind_mapper`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedSession.get_bind:67
msgid ":meth:`.Session.bind_table`"
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard:1
msgid "return a new query, limited to a single shard ID."
msgstr ""

#: of sqlalchemy.ext.horizontal_shard.ShardedQuery.set_shard:3
msgid ""
"all subsequent operations with the returned query will be against the "
"single shard regardless of other state."
msgstr ""

