# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-21 14:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/versioning.rst:4
msgid "Configuring a Version Counter"
msgstr "버전 카운터 설정"

#: ../../orm/versioning.rst:6
msgid ""
"The :class:`.Mapper` supports management of a :term:`version id column`, "
"which is a single table column that increments or otherwise updates its "
"value each time an ``UPDATE`` to the mapped table occurs.  This value is "
"checked each time the ORM emits an ``UPDATE`` or ``DELETE`` against the "
"row to ensure that the value held in memory matches the database value."
msgstr ""
":class:`.Mapper` 클래스는 :term:`version id column`\ 이라는 테이블 컬럼을 지원한다. "
"매핑된 테이블에 ``UPDATE`` 연산이 있을 때마다 값이 증가하거나 바뀐다. "
"ORM이 해당 레코드 행을 ``UPDATE`` 또는 ``DELETE`` 실행을 할 때마다 메모리에 저장된 값이 "
"실제 데이터베이스에 있는 값과 같은지 확인한다. "

#: ../../orm/versioning.rst:14
msgid ""
"Because the versioning feature relies upon comparison of the **in "
"memory** record of an object, the feature only applies to the "
":meth:`.Session.flush` process, where the ORM flushes individual in-"
"memory rows to the database. It does **not** take effect when performing "
"a multirow UPDATE or DELETE using :meth:`.Query.update` or "
":meth:`.Query.delete` methods, as these methods only emit an UPDATE or "
"DELETE statement but otherwise do not have direct access to the contents "
"of those rows being affected."
msgstr ""
"버전관리 기능은 객체의 인메모리 레코드 값을 비교해야 하기 때문에 :meth:`.Session.flush` 프로세스에만 "
"적용되는데 ORM은 개별 레코드 행 단위로 flush 처리하기 때문에 여러개의 행을 :meth:`.Query.update` "
"또는 :meth:`.Query.delete` 메서드로 동시처리할 때는 적용되지 않는다. 이 때는 UPDATE 또는 DELETE 명령이 "
"만들어질 뿐 이 행들의 내용에 대해 직접 영향을 미치지는 않는다. "

#: ../../orm/versioning.rst:22
msgid ""
"The purpose of this feature is to detect when two concurrent transactions"
" are modifying the same row at roughly the same time, or alternatively to"
" provide a guard against the usage of a \"stale\" row in a system that "
"might be re-using data from a previous transaction without refreshing "
"(e.g. if one sets ``expire_on_commit=False`` with a :class:`.Session`, it"
" is possible to re-use the data from a previous transaction)."
msgstr ""
"이 기능의 목적은 두 개의 트랜잭션이 같은 행을 동시에 수정하려고 하는 것을 감지하거나 "
"리프레시를 하지 않고 이전 트랜잭션의 시간 경과된(staled) 데이터를 재사용하는 것을 막는 것이다. "
"(만약 :class:`.Session`\ 에서 ``expire_on_commit=False`` 설정을 하면 "
"먼저 트랜잭션의 값을 재사용하는 것이 가능하다)"

#: ../../orm/versioning.rst:31
msgid ""
"When detecting concurrent updates within transactions, it is typically "
"the case that the database's transaction isolation level is below the "
"level of :term:`repeatable read`; otherwise, the transaction will not be "
"exposed to a new row value created by a concurrent update which conflicts"
" with the locally updated value.  In this case, the SQLAlchemy versioning"
" feature will typically not be useful for in-transaction conflict "
"detection, though it still can be used for cross-transaction staleness "
"detection."
msgstr ""
"복수의 트랜잭션이 동시에 값을 수정하려는 경우, 보통은 데이터베이스 트랜잭션 격리 레벨이 "
":term:`repeatable read` 격리 레벨보다 낮은 경우가 많다. "
"그렇지 않으면 트랜택션은 동시에 업데이트된 값을 읽지 못한다. "
"이 경우 SQLAlchemy 버전관리 기능은 트랜잭션 내의 충돌이 있는 경우 유용하지 않다. "
"하지만 트랜잭션 바깥의 충돌에서는 사용할 수 있다."

#: ../../orm/versioning.rst:39
msgid ""
"The database that enforces repeatable reads will typically either have "
"locked the target row against a concurrent update, or is employing some "
"form of multi version concurrency control such that it will emit an error"
" when the transaction is committed.  SQLAlchemy's version_id_col is an "
"alternative which allows version tracking to occur for specific tables "
"within a transaction that otherwise might not have this isolation level "
"set."
msgstr ""
"repeatable read 수준을 강제하는 데이터베이스는 동시 업데이트시에 목표 레코드를 잠그거나 "
"트랜잭션이 끝났을 때 에러를 내는 형태의 동시성 제어를 한다. SQLAlchemy의 version_id_col은 "
"이러한 격리 수준에서도 트랜잭션 내의 버전 추적을 가능하게 한다. "

#: ../../orm/versioning.rst:48
msgid ""
"`Repeatable Read Isolation Level "
"<http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-"
"REPEATABLE-READ>`_ - PostgreSQL's implementation of repeatable read, "
"including a description of the error condition."
msgstr ""
"`Repeatable Read 격리 수준 "
"<http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-"
"REPEATABLE-READ>`_ - 에러 조건의 설명을 포함한 PostgreSQL의 repeatable read 구현에 "
"대한 설명"


#: ../../orm/versioning.rst:51
msgid "Simple Version Counting"
msgstr "단순 버전 관리"

#: ../../orm/versioning.rst:53
msgid ""
"The most straightforward way to track versions is to add an integer "
"column to the mapped table, then establish it as the ``version_id_col`` "
"within the mapper options::"
msgstr ""
"버전을 추적하는 가장 단순한 방법은 매핑된 테이블에 숫자 컬럼을 추가한 뒤 이를 "
"``version_id_col`` 인수로 매퍼 옵션에 추가하는 것이다.::"

#: ../../orm/versioning.rst:68
msgid ""
"It is **strongly recommended** that the ``version_id`` column be made NOT"
" NULL.  The versioning feature **does not support** a NULL value in the "
"versioning column."
msgstr ""
"``version_id`` 컬럼은 NOT NULL로 만들어야 한다. 버전관리 컬럼에서는 NULL 값을 지원하지 않는다. "

#: ../../orm/versioning.rst:72
msgid ""
"Above, the ``User`` mapping tracks integer versions using the column "
"``version_id``.   When an object of type ``User`` is first flushed, the "
"``version_id`` column will be given a value of \"1\".   Then, an UPDATE "
"of the table later on will always be emitted in a manner similar to the "
"following::"
msgstr ""
"또한 ``User`` 매핑은 ``version_id`` 컬럼을 사용하여 정수로 버전을 관리한다. "
"``User`` 타입 객체가 처음으로 flush될 때 ``version_id`` 컬럼의 값은  \"1\"\ 이 된다. "
"나중에 테치블이 UPDATE할 때는 다음처럼 해야 한다.::"

#: ../../orm/versioning.rst:82
msgid ""
"The above UPDATE statement is updating the row that not only matches "
"``user.id = 1``, it also is requiring that ``user.version_id = 1``, where"
" \"1\" is the last version identifier we've been known to use on this "
"object. If a transaction elsewhere has modified the row independently, "
"this version id will no longer match, and the UPDATE statement will "
"report that no rows matched; this is the condition that SQLAlchemy tests,"
" that exactly one row matched our UPDATE (or DELETE) statement.  If zero "
"rows match, that indicates our version of the data is stale, and a "
":exc:`.StaleDataError` is raised."
msgstr ""
"위의 UPDATE 명령에서는 업데이트하는 행을 찾을 때 `user.id = 1`` 조건 뿐 아니라 "
"``user.version_id = 1`` 조건까지 만족하는 행을 찾는다. \"1\"\ 이 우리가 사용하는 "
"객체의 최신 버전 넘버이기 때문이다. "
"만약 다른 곳의 트랜잭션이 이 행의 값을 독단적으로 바꾸었다면 더이상 이 버전 넘버가 맞지 않기 때문에 "
"UPDATE 명령은 행을 찾지 못한다고 보고할 것이다. 이 조건이 바로 SQLAlchemy가 UPDATE (또는 DELETE) "
"명령을 실행할 때 확인하는 조건이다. "
"만약 해당하는 행을 찾지 못하면 해당 버전의 데이터가 시간경과되었다(stale)는 뜻이고 "
":exc:`.StaleDataError` 에러가 발생한다."

#: ../../orm/versioning.rst:94
msgid "Custom Version Counters / Types"
msgstr ""

#: ../../orm/versioning.rst:96
msgid ""
"Other kinds of values or counters can be used for versioning.  Common "
"types include dates and GUIDs.   When using an alternate type or counter "
"scheme, SQLAlchemy provides a hook for this scheme using the "
"``version_id_generator`` argument, which accepts a version generation "
"callable.  This callable is passed the value of the current known "
"version, and is expected to return the subsequent version."
msgstr ""

#: ../../orm/versioning.rst:102
msgid ""
"For example, if we wanted to track the versioning of our ``User`` class "
"using a randomly generated GUID, we could do this (note that some "
"backends support a native GUID type, but we illustrate here using a "
"simple string)::"
msgstr ""

#: ../../orm/versioning.rst:120
msgid ""
"The persistence engine will call upon ``uuid.uuid4()`` each time a "
"``User`` object is subject to an INSERT or an UPDATE.  In this case, our "
"version generation function can disregard the incoming value of "
"``version``, as the ``uuid4()`` function generates identifiers without "
"any prerequisite value.  If we were using a sequential versioning scheme "
"such as numeric or a special character system, we could make use of the "
"given ``version`` in order to help determine the subsequent value."
msgstr ""

#: ../../orm/versioning.rst:131
msgid ":ref:`custom_guid_type`"
msgstr ""

#: ../../orm/versioning.rst:136
msgid "Server Side Version Counters"
msgstr ""

#: ../../orm/versioning.rst:138
msgid ""
"The ``version_id_generator`` can also be configured to rely upon a value "
"that is generated by the database.  In this case, the database would need"
" some means of generating new identifiers when a row is subject to an "
"INSERT as well as with an UPDATE.   For the UPDATE case, typically an "
"update trigger is needed, unless the database in question supports some "
"other native version identifier.  The PostgreSQL database in particular "
"supports a system column called `xmin "
"<http://www.postgresql.org/docs/9.1/static/ddl-system-columns.html>`_ "
"which provides UPDATE versioning.  We can make use of the PostgreSQL "
"``xmin`` column to version our ``User`` class as follows::"
msgstr ""

#: ../../orm/versioning.rst:163
msgid ""
"With the above mapping, the ORM will rely upon the ``xmin`` column for "
"automatically providing the new value of the version id counter."
msgstr ""

msgid "creating tables that refer to system columns"
msgstr ""

#: ../../orm/versioning.rst:168
msgid ""
"In the above scenario, as ``xmin`` is a system column provided by "
"PostgreSQL, we use the ``system=True`` argument to mark it as a system-"
"provided column, omitted from the ``CREATE TABLE`` statement."
msgstr ""

#: ../../orm/versioning.rst:173
msgid ""
"The ORM typically does not actively fetch the values of database-"
"generated values when it emits an INSERT or UPDATE, instead leaving these"
" columns as \"expired\" and to be fetched when they are next accessed, "
"unless the ``eager_defaults`` :func:`.mapper` flag is set.  However, when"
" a server side version column is used, the ORM needs to actively fetch "
"the newly generated value.  This is so that the version counter is set up"
" *before* any concurrent transaction may update it again.   This fetching"
" is also best done simultaneously within the INSERT or UPDATE statement "
"using :term:`RETURNING`, otherwise if emitting a SELECT statement "
"afterwards, there is still a potential race condition where the version "
"counter may change before it can be fetched."
msgstr ""

#: ../../orm/versioning.rst:184
msgid ""
"When the target database supports RETURNING, an INSERT statement for our "
"``User`` class will look like this::"
msgstr ""

#: ../../orm/versioning.rst:190
msgid ""
"Where above, the ORM can acquire any newly generated primary key values "
"along with server-generated version identifiers in one statement.   When "
"the backend does not support RETURNING, an additional SELECT must be "
"emitted for **every** INSERT and UPDATE, which is much less efficient, "
"and also introduces the possibility of missed version counters::"
msgstr ""

#: ../../orm/versioning.rst:203
msgid ""
"It is *strongly recommended* that server side version counters only be "
"used when absolutely necessary and only on backends that support "
":term:`RETURNING`, e.g. PostgreSQL, Oracle, SQL Server (though SQL Server"
" has `major caveats "
"<http://blogs.msdn.com/b/sqlprogrammability/archive/2008/07/11/update-"
"with-output-clause-triggers-and-sqlmoreresults.aspx>`_ when triggers are "
"used), Firebird."
msgstr ""

#: ../../orm/versioning.rst:210
msgid "Support for server side version identifier tracking."
msgstr ""

#: ../../orm/versioning.rst:213
msgid "Programmatic or Conditional Version Counters"
msgstr ""

#: ../../orm/versioning.rst:215
msgid ""
"When ``version_id_generator`` is set to False, we can also "
"programmatically (and conditionally) set the version identifier on our "
"object in the same way we assign any other mapped attribute.  Such as if "
"we used our UUID example, but set ``version_id_generator`` to ``False``, "
"we can set the version identifier at our choosing::"
msgstr ""

#: ../../orm/versioning.rst:246
msgid ""
"We can update our ``User`` object without incrementing the version "
"counter as well; the value of the counter will remain unchanged, and the "
"UPDATE statement will still check against the previous value.  This may "
"be useful for schemes where only certain classes of UPDATE are sensitive "
"to concurrency issues::"
msgstr ""

#: ../../orm/versioning.rst:258
msgid "Support for programmatic and conditional version identifier tracking."
msgstr ""

